===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 25

[display_status]

[respond]

[gcode_macro START_PRINT]
gcode = 
	G28
	RESPOND MSG='STARTING PRINT'
	RESPOND MSG='Starting extruder heating'
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
	RESPOND MSG='Starting bed heating'
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE
	M104 S{EXTRUDER_TEMP}
	M140 S{BED_TEMP}
	
	G90
	
	
	
	G92 E0
	G1 Z10 F3000
	M190 S{BED_TEMP}; Wait for bed to reach temperature
	M109 S{EXTRUDER_TEMP}
	G1 Z2.0 F3000; Clean nozzle
	G1 X5.1 Y20 Z0.3 F5000.0
	G1 X5.1 Y200.0 Z0.3 F1500.0 E15
	G1 X5.4 Y200.0 Z0.3 F5000.0
	G1 X5.4 Y20 Z0.3 F1500.0 E30
	G1 Z0.2 F3000
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 Z0.2 E-2 F2400
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0%}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	{% if printer.idle_timeout.state|upper == "IDLE" %}
	{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}
	{% endif %}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro TRAMMING]
gcode = 
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z10 F5000.0
	
	
	G1 X75 Y35 F5000.0
	PROBE
	G1 Z10 F5000.0
	
	
	G1 X200 Y35 F5000.0
	PROBE
	G1 Z10 F5000.0
	
	
	G1 X200 Y200 F5000.0
	PROBE
	G1 Z10 F5000.0
	
	
	G1 X75 Y200 F5000.0
	PROBE
	G1 Z10 F5000.0
	
	{% else %}
	RESPOND MSG='Printer not homed'
	{% endif %}

[gcode_macro UPDATE_GITHUB]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/juani/printer_data/klipper-backup/script.sh
timeout = 90.0
verbose = True

[exclude_object]

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 5
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA5
position_endstop = 0
position_max = 235
homing_speed = 50

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA6
position_endstop = 0
position_max = 235
homing_speed = 50

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -5
position_max = 220

[extruder]
max_extrude_only_distance = 150.0
step_pin = PB4
dir_pin = PB3
enable_pin = !PC3
microsteps = 16
rotation_distance = 34.406
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
min_temp = 0
max_temp = 250
pressure_advance = 0.48
control = pid
pid_kp = 27.102
pid_ki = 1.705
pid_kd = 107.731

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 74.327
pid_ki = 1.635
pid_kd = 844.541

[fan]
pin = PA0

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 500
max_accel = 4000
max_z_velocity = 10
max_z_accel = 300

[display]
lcd_type = st7920
cs_pin = EXP1_7
sclk_pin = EXP1_6
sid_pin = EXP1_8
encoder_pins = ^EXP1_5, ^EXP1_3
click_pin = ^!EXP1_2

[output_pin beeper]
pin = EXP1_1

[board_pins]
aliases = 
	EXP1_1=PC6,EXP1_3=PB10,EXP1_5=PB14,EXP1_7=PB12,EXP1_9=<GND>,
	EXP1_2=PB2,EXP1_4=PB11,EXP1_6=PB13,EXP1_8=PB15,EXP1_10=<5V>,
	PROBE_IN=PB1,PROBE_OUT=PB0,FIL_RUNOUT=PC6

[bltouch]
sensor_pin = ^PB1
control_pin = PB0
x_offset = -45
y_offset = -7
z_offset = 1.124
probe_with_touch_mode = true
stow_on_each_sample = false
pin_up_touch_mode_reports_triggered = False

[safe_z_home]
home_xy_position = 162.5,124.5
speed = 75
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 120
horizontal_move_z = 5
mesh_min = 15, 15
mesh_max = 188, 191
probe_count = 9,9
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[filament_switch_sensor RUNOUT]
switch_pin = !PA4
pause_on_runout = true
runout_gcode = PAUSE
insert_gcode = 
event_delay = 2.0
pause_delay = 0.2

[screws_tilt_adjust]
screw1 = 76, 38
screw1_name = front left screw
screw2 = 234, 38
screw2_name = front right screw
screw3 = 234, 203
screw3_name = rear right screw
screw4 = 76, 203
screw4_name = rear left screw
horizontal_move_z = 10.
speed = 250.
screw_thread = CW-M4

[bed_mesh default]
version = 1
points = 
	0.095000, 0.092500, 0.085000, 0.087500, 0.075000, 0.057500, 0.067500, 0.027500, 0.002500
	0.045000, 0.022500, 0.042500, 0.030000, 0.007500, -0.002500, -0.012500, -0.007500, -0.010000
	0.075000, 0.100000, 0.062500, 0.067500, 0.042500, 0.027500, 0.032500, 0.012500, 0.002500
	0.065000, 0.117500, 0.052500, 0.015000, -0.002500, -0.012500, -0.007500, -0.017500, -0.010000
	-0.020000, 0.005000, -0.007500, 0.012500, 0.000000, 0.010000, 0.025000, 0.010000, 0.000000
	-0.007500, -0.025000, -0.002500, -0.002500, -0.012500, 0.002500, -0.002500, 0.005000, 0.025000
	-0.007500, -0.005000, 0.015000, 0.030000, 0.045000, 0.057500, 0.067500, 0.055000, 0.050000
	-0.052500, -0.047500, -0.030000, -0.002500, 0.017500, 0.035000, 0.047500, 0.060000, 0.082500
	-0.022500, 0.010000, 0.037500, 0.082500, 0.092500, 0.115000, 0.147500, 0.127500, 0.150000
x_count = 9
y_count = 9
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 15.0
max_x = 187.96
min_y = 15.0
max_y = 191.0
=======================
Loaded MCU 'mcu' 112 commands (v0.11.0-304-gf7567a0d / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
Args: ['/home/juani/klipper/klippy/klippy.py', '/home/juani/printer_data/config/printer.cfg', '-I', '/home/juani/printer_data/comms/klippy.serial', '-l', '/home/juani/printer_data/logs/klippy.log', '-a', '/home/juani/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-13-g795ce490-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core Intel(R) Core(TM) i5-2520M CPU @ 2.50GHz
Python: '3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]'
webhooks client 139869975099616: {'program': 'Moonraker', 'version': 'v0.8.0-206-g9ad8fed'}
=============== Log rollover at Tue Dec  5 17:17:43 2023 ===============
b'Got EOF when reading from device'
Timeout with MCU 'mcu' (eventtime=333172.162378)
Transition to shutdown state: Lost communication with MCU 'mcu'
Dumping gcode input 0 blocks
Dumping 20 requests for client 139869975099616
Received 226634.856906: b'{"id": 139638598513232, "method": "objects/query", "params": {"objects": {"extruder": ["can_extrude"]}}}'
Received 226958.654538: b'{"id": 139638598516160, "method": "info", "params": {}}'
Received 226958.654538: b'{"id": 139638598508864, "method": "objects/list", "params": {}}'
Received 226958.655239: b'{"id": 139638294563856, "method": "gcode/help", "params": {}}'
Received 226958.722427: b'{"id": 139638598509488, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "configfile": null, "mcu": null, "gcode_macro HELLO_WORLD": null, "gcode_move": null, "print_stats": null, "virtual_sdcard": null, "pause_resume": null, "display_status": null, "gcode_macro START_PRINT": null, "gcode_macro END_PRINT": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro SET_PAUSE_NEXT_LAYER": null, "gcode_macro SET_PAUSE_AT_LAYER": null, "gcode_macro SET_PRINT_STATS_INFO": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro _CLIENT_EXTRUDE": null, "gcode_macro _CLIENT_RETRACT": null, "gcode_macro TRAMMING": null, "gcode_macro UPDATE_GITHUB": null, "exclude_object": null, "gcode_macro BED_MESH_CALIBRATE": null, "gcode_macro LINE_PURGE": null, "gcode_macro SMART_PARK": null, "gcode_macro _KAMP_Settings": null, "heaters": null, "heater_bed": null, "fan": null, "output_pin beeper": null, "probe": null, "bed_mesh": null, "filament_switch_sensor RUNOUT": null, "screws_tilt_adjust": null, "stepper_enable": null, "motion_report": null, "query_endstops": null, "idle_timeout": null, "system_stats": null, "manual_probe": null, "toolhead": null, "extruder": null, "history": null}, "response_template": {"method": "process_status_update"}}}'
Received 226959.945949: b'{"id": 139638294565584, "method": "info", "params": {}}'
Received 226959.947011: b'{"id": 139638294563952, "method": "objects/list", "params": {}}'
Received 226960.347444: b'{"id": 139638598510928, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "configfile": null, "mcu": null, "gcode_macro HELLO_WORLD": null, "gcode_move": null, "print_stats": null, "virtual_sdcard": null, "pause_resume": null, "display_status": null, "gcode_macro START_PRINT": null, "gcode_macro END_PRINT": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro SET_PAUSE_NEXT_LAYER": null, "gcode_macro SET_PAUSE_AT_LAYER": null, "gcode_macro SET_PRINT_STATS_INFO": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro _CLIENT_EXTRUDE": null, "gcode_macro _CLIENT_RETRACT": null, "gcode_macro TRAMMING": null, "gcode_macro UPDATE_GITHUB": null, "exclude_object": null, "gcode_macro BED_MESH_CALIBRATE": null, "gcode_macro LINE_PURGE": null, "gcode_macro SMART_PARK": null, "gcode_macro _KAMP_Settings": null, "heaters": null, "heater_bed": null, "fan": null, "output_pin beeper": null, "probe": null, "bed_mesh": null, "filament_switch_sensor RUNOUT": null, "screws_tilt_adjust": null, "stepper_enable": null, "motion_report": null, "query_endstops": null, "idle_timeout": null, "system_stats": null, "manual_probe": null, "toolhead": null, "extruder": null, "history": null}, "response_template": {"method": "process_status_update"}}}'
Received 226961.302005: b'{"id": 139638294566496, "method": "gcode/help", "params": {}}'
Received 226961.685651: b'{"id": 139638294566784, "method": "objects/query", "params": {"objects": {"extruder": ["can_extrude"]}}}'
Received 231493.082161: b'{"id": 139638598508912, "method": "info", "params": {}}'
Received 231493.082657: b'{"id": 139638598510400, "method": "objects/list", "params": {}}'
Received 231493.082657: b'{"id": 139638598516496, "method": "gcode/help", "params": {}}'
Received 231493.103395: b'{"id": 139638598510496, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "configfile": null, "mcu": null, "gcode_macro HELLO_WORLD": null, "gcode_move": null, "print_stats": null, "virtual_sdcard": null, "pause_resume": null, "display_status": null, "gcode_macro START_PRINT": null, "gcode_macro END_PRINT": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro SET_PAUSE_NEXT_LAYER": null, "gcode_macro SET_PAUSE_AT_LAYER": null, "gcode_macro SET_PRINT_STATS_INFO": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro _CLIENT_EXTRUDE": null, "gcode_macro _CLIENT_RETRACT": null, "gcode_macro TRAMMING": null, "gcode_macro UPDATE_GITHUB": null, "exclude_object": null, "gcode_macro BED_MESH_CALIBRATE": null, "gcode_macro LINE_PURGE": null, "gcode_macro SMART_PARK": null, "gcode_macro _KAMP_Settings": null, "heaters": null, "heater_bed": null, "fan": null, "output_pin beeper": null, "probe": null, "bed_mesh": null, "filament_switch_sensor RUNOUT": null, "screws_tilt_adjust": null, "stepper_enable": null, "motion_report": null, "query_endstops": null, "idle_timeout": null, "system_stats": null, "manual_probe": null, "toolhead": null, "extruder": null, "history": null}, "response_template": {"method": "process_status_update"}}}'
Received 231494.146550: b'{"id": 139638598515152, "method": "objects/query", "params": {"objects": {"extruder": ["can_extrude"]}}}'
Received 232408.408347: b'{"id": 139638598512704, "method": "info", "params": {}}'
Received 232408.408347: b'{"id": 139638598508432, "method": "objects/list", "params": {}}'
Received 232408.408909: b'{"id": 139638598515200, "method": "gcode/help", "params": {}}'
Received 232408.664474: b'{"id": 139638598515200, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "configfile": null, "mcu": null, "gcode_macro HELLO_WORLD": null, "gcode_move": null, "print_stats": null, "virtual_sdcard": null, "pause_resume": null, "display_status": null, "gcode_macro START_PRINT": null, "gcode_macro END_PRINT": null, "gcode_macro CANCEL_PRINT": null, "gcode_macro PAUSE": null, "gcode_macro RESUME": null, "gcode_macro SET_PAUSE_NEXT_LAYER": null, "gcode_macro SET_PAUSE_AT_LAYER": null, "gcode_macro SET_PRINT_STATS_INFO": null, "gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL": null, "gcode_macro _CLIENT_EXTRUDE": null, "gcode_macro _CLIENT_RETRACT": null, "gcode_macro TRAMMING": null, "gcode_macro UPDATE_GITHUB": null, "exclude_object": null, "gcode_macro BED_MESH_CALIBRATE": null, "gcode_macro LINE_PURGE": null, "gcode_macro SMART_PARK": null, "gcode_macro _KAMP_Settings": null, "heaters": null, "heater_bed": null, "fan": null, "output_pin beeper": null, "probe": null, "bed_mesh": null, "filament_switch_sensor RUNOUT": null, "screws_tilt_adjust": null, "stepper_enable": null, "motion_report": null, "query_endstops": null, "idle_timeout": null, "system_stats": null, "manual_probe": null, "toolhead": null, "extruder": null, "history": null}, "response_template": {"method": "process_status_update"}}}'
Received 232411.174185: b'{"id": 139638598510064, "method": "objects/query", "params": {"objects": {"extruder": ["can_extrude"]}}}'
gcode state: absolute_coord=True absolute_extrude=True base_position=[0.0, 0.0, 0.0, 0.0] last_position=[0.0, 0.0, 0.0, 0.0] homing_position=[0.0, 0.0, 0.0, 0.0] speed_factor=0.016666666666666666 extrude_factor=1.0 speed=25.0
Reactor garbage collection: (231493.084184672, 0.0, 0.0)
